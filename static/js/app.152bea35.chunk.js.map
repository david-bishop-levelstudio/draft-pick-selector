{"version":3,"sources":["data/index.tsx","components/MenuItem.tsx","components/Menu.tsx","App.tsx"],"names":["availablePicks","MenuItem","pick","picks","toggle","isAvailable","includes","View","style","styles","btn","first","TouchableOpacity","width","onPress","Text","text","icon","off","StyleSheet","create","padding","height","justifyContent","alignItems","borderTopWidth","borderColor","flexDirection","paddingHorizontal","color","fontSize","fontFamily","borderRadius","backgroundColor","Menu","toggled","picksSet","close","useState","Animated","Value","translateX","useEffect","spring","toValue","useNativeDriver","start","menu","transform","MaterialCommunityIcons","name","size","flex","map","int","clonedPicks","splice","indexOf","push","sort","a","b","handleTogglePick","position","top","left","paddingTop","paddingRight","borderRightWidth","right","App","toggledSet","Date","datetime","datetimeSet","selecting","selectingSet","selected","selectedSet","result","resultSet","interval","setInterval","clearInterval","container","t","time","toLocaleTimeString","count","origin","x","y","title","row","key","marginTop","ActivityIndicator","alignSelf","Button","setTimeout","selection","Math","floor","random","length","StatusBar","Result","suffix","getSuffix","DraftPick","paddingVertical","textAlign","fontWeight","letterSpacing","marginVertical","marginHorizontal"],"mappings":"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","file":"static/js/app.152bea35.chunk.js","sourcesContent":["export const availablePicks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];","import React from 'react'\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\n\ninterface IMenuItem {\n  pick: number\n  picks: number[]\n  toggle: () => void\n}\n\nconst MenuItem = ({ pick, picks, toggle }: IMenuItem) => {\n  const isAvailable = picks.includes(pick)\n  return (\n    <View style={[styles.btn, pick === 1 && styles.first]}>\n      <TouchableOpacity style={{ width: \"100%\" }} onPress={toggle}>\n        <View style={styles.toggle}>\n          <Text style={[styles.text]}>{pick}</Text>\n          <View style={[styles.icon, !isAvailable && styles.off]}></View>\n        </View>\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default MenuItem\n\nconst styles = StyleSheet.create({\n  btn: {\n    padding: 5,\n    height: 40,\n    width: \"100%\",\n    justifyContent: \"center\", alignItems: \"center\",\n    borderTopWidth: 1,\n    borderColor: '#999'\n  },\n  first: { borderTopWidth: 0 },\n  toggle: { flexDirection: \"row\", width: 100, justifyContent: \"space-between\", alignItems: \"center\", paddingHorizontal: 16 },\n  text: {\n    color: 'black',\n    fontSize: 20,\n    fontFamily: \"Futura\"\n  },\n  icon: {\n    height: 10, width: 10, borderRadius: 10, backgroundColor: \"#00E37A\"\n  }, off: { backgroundColor: \"rgb(255,17,89)\" }\n})\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Animated, TouchableOpacity, View, Text } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { availablePicks } from '../data';\nimport MenuItem from './MenuItem';\n\ninterface IMenu {\n  toggled: boolean\n  picks: number[]\n  picksSet: (arr: number[]) => void\n  close: () => void\n}\n\nconst MenuWidth = 200;\n\n\nconst Menu = ({ toggled, picks, picksSet, close }: IMenu) => {\n\n  const [translateX] = useState(new Animated.Value(0))\n  const animateMenu = () => {\n    Animated.spring(translateX, {\n      toValue: !toggled ? -MenuWidth : 0,\n      useNativeDriver: true\n    }).start()\n  }\n\n  useEffect(() => {\n    animateMenu()\n  }, [toggled])\n\n  const handleTogglePick = (int: number) => {\n    let clonedPicks = [...picks]\n    if (picks.includes(int)) {\n      clonedPicks.splice(clonedPicks.indexOf(int), 1)\n    } else {\n      {\n        clonedPicks.push(int)\n        clonedPicks.sort((a: number, b: number) => a - b)\n      }\n    }\n    picksSet(clonedPicks)\n  }\n\n  return (\n    <Animated.View style={[styles.menu, [{ transform: [{ translateX }] }]]}>\n      <View style={styles.close}>\n        <TouchableOpacity style={styles.btn} onPress={close}>\n          <MaterialCommunityIcons name=\"close\" size={40} />\n        </TouchableOpacity>\n      </View>\n      <View style={{ flex: 1, padding: 16 }}>\n        {availablePicks.map((pick: number) => <MenuItem {...{ pick, picks }} toggle={() => handleTogglePick(pick)} />)}\n      </View>\n    </Animated.View>\n  )\n}\n\nexport default Menu\n\nconst styles = StyleSheet.create({\n  menu: { position: 'absolute', height: \"100%\", width: MenuWidth, top: 0, left: 0, backgroundColor: \"#fff\", paddingTop: 50, paddingRight: 50, borderRightWidth: 1 },\n  close: {\n    position: 'absolute',\n    top: 0, right: 0,\n  },\n  btn: { height: 50, width: 50, alignItems: \"center\", justifyContent: \"center\" }\n})\n","import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { ActivityIndicator, Button, Dimensions, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport ConfettiCannon from 'react-native-confetti-cannon';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport Menu from './components/Menu';\nimport { availablePicks } from './data';\n\nexport default function App() {\n\n  const [toggled, toggledSet] = useState(true)\n  const [datetime, datetimeSet] = useState(new Date())\n  const [selecting, selectingSet] = useState(false)\n  const [selected, selectedSet] = useState(false)\n  const [result, resultSet] = useState(0)\n  const [picks, picksSet] = useState(availablePicks)\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      datetimeSet(new Date())\n    }, 1000)\n\n    return () => clearInterval(interval)\n  })\n\n  const handleSelection = () => {\n    selectingSet(true)\n    setTimeout(() => {\n      const selection = Math.floor(Math.random() * picks.length)\n      resultSet(picks[selection])\n      selectingSet(false)\n      selectedSet(true)\n    }, 1500)\n  }\n\n  const handleToggle = () => toggledSet((t: boolean) => !t)\n\n  return (\n    <View style={styles.container}>\n      <View style={{ position: 'absolute', top: 0, left: 16 }}>\n        <TouchableOpacity onPress={handleToggle}>\n          <MaterialCommunityIcons name=\"menu\" size={40} />\n        </TouchableOpacity>\n      </View>\n      <Text style={[styles.time, styles.text]}>{datetime.toLocaleTimeString()}</Text>\n      <View style={{ flex: 1 }}>\n\n        {!selected ? <>\n          <Text style={[styles.title, styles.text]}>Picks Available</Text>\n          <View style={styles.row}>\n            {picks.map((pick: number) => <DraftPick key={pick} {...{ pick }} />)}\n          </View>\n          <View style={{ marginTop: 100, }}>\n            {!selecting\n              ? <View style={{ alignSelf: 'center', width: 320 }}>\n                <Button title=\"Randomly Select Pick\" onPress={handleSelection} /></View>\n              : <ActivityIndicator size={'large'} />}\n          </View>\n        </> : <View style={{ flex: 1 }}>\n          <Result {...{ result }} />\n          <ConfettiCannon count={200} origin={{ x: 0, y: 0 }} />\n        </View>}\n      <StatusBar style=\"auto\" />\n      </View>\n      <Menu close={() => toggledSet(false)} {...{ toggled, picks, picksSet }} />\n    </View>\n  );\n}\n\nconst Result = ({ result }: { result: null | number }) => {\n  if (!result) return null\n  return (\n    <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={[styles.text, styles.title, styles.result]}>{result}</Text>\n      <Text style={[styles.text, styles.title, styles.suffix]}>{getSuffix(result)}</Text>\n    </View>\n  )\n}\n\nconst DraftPick = ({ pick }: { pick: number }) => {\n  let suffix = getSuffix(pick)\n  return <Text style={[styles.pick, styles.text]}>{pick}<Text style={styles.suffix}>{suffix}</Text></Text>\n}\n\nconst getSuffix = (int: number) => {\n  switch (int) {\n    case 1:\n      return \"st\"\n    case 2:\n      return \"nd\"\n    case 3:\n      return \"rd\"\n\n    default:\n      return \"th\"\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 60,\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n  },\n  text: { textAlign: \"center\" },\n  time: { fontFamily: 'Futura', fontWeight: 'bold', letterSpacing: 2, fontSize: 20 },\n  title: { textAlign: \"center\", fontFamily: 'Futura', fontWeight: 'normal', letterSpacing: 1, fontSize: 20, marginVertical: 20 },\n  row: { flexDirection: 'row', alignItems: \"center\", justifyContent: \"center\" },\n  pick: { fontSize: 30, marginHorizontal: 10 },\n  suffix: { color: \"#777\" },\n  result: { fontSize: 150 }\n});\n"],"sourceRoot":""}