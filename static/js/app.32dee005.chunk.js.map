{"version":3,"sources":["data/index.tsx","components/MenuItem.tsx","components/Menu.tsx","App.tsx"],"names":["availablePicks","MenuItem","pick","picks","toggle","isAvailable","includes","View","style","styles","btn","first","TouchableOpacity","width","onPress","Text","text","icon","off","StyleSheet","create","padding","height","justifyContent","alignItems","borderTopWidth","borderColor","flexDirection","paddingHorizontal","color","fontSize","fontFamily","borderRadius","backgroundColor","Dimensions","get","Menu","toggled","picksSet","close","useState","Animated","Value","translateX","useEffect","timing","toValue","useNativeDriver","start","menu","transform","SafeAreaView","flex","map","key","int","clonedPicks","splice","indexOf","push","sort","a","b","handleTogglePick","MaterialCommunityIcons","name","size","position","top","left","borderRightWidth","borderRightColor","marginTop","App","toggledSet","Date","datetime","datetimeSet","selecting","selectingSet","selected","selectedSet","result","resultSet","interval","setInterval","clearInterval","container","t","time","toLocaleTimeString","count","origin","x","y","title","row","ActivityIndicator","alignSelf","Button","setTimeout","selection","Math","floor","random","length","StatusBar","Result","suffix","getSuffix","DraftPick","paddingVertical","textAlign","fontWeight","letterSpacing","marginVertical","flexWrap","marginHorizontal"],"mappings":"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","file":"static/js/app.32dee005.chunk.js","sourcesContent":["export const availablePicks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];","import React from 'react'\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\n\ninterface IMenuItem {\n  pick: number\n  picks: number[]\n  toggle: () => void\n}\n\nconst MenuItem = ({ pick, picks, toggle }: IMenuItem) => {\n  const isAvailable = picks.includes(pick)\n  return (\n    <View style={[styles.btn, pick === 1 && styles.first]}>\n      <TouchableOpacity style={{ width: \"100%\" }} onPress={toggle}>\n        <View style={styles.toggle}>\n          <Text style={[styles.text]}>{pick}</Text>\n          <View style={[styles.icon, !isAvailable && styles.off]}></View>\n        </View>\n      </TouchableOpacity>\n    </View>\n  )\n}\n\nexport default MenuItem\n\nconst styles = StyleSheet.create({\n  btn: {\n    padding: 5,\n    height: 40,\n    width: \"100%\",\n    justifyContent: \"center\", alignItems: \"center\",\n    borderTopWidth: 1,\n    borderColor: '#999'\n  },\n  first: { borderTopWidth: 0 },\n  toggle: { flexDirection: \"row\", width: 100, justifyContent: \"space-between\", alignItems: \"center\", paddingHorizontal: 16 },\n  text: {\n    color: 'black',\n    fontSize: 20,\n    fontFamily: \"Futura\"\n  },\n  icon: {\n    height: 10, width: 10, borderRadius: 10, backgroundColor: \"#00E37A\"\n  }, off: { backgroundColor: \"rgb(255,17,89)\" }\n})\n","import React, { useEffect, useState } from 'react'\nimport { StyleSheet, Animated, TouchableOpacity, View, Text, Dimensions } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { availablePicks } from '../data';\nimport MenuItem from './MenuItem';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\ninterface IMenu {\n  toggled: boolean\n  picks: number[]\n  picksSet: (arr: number[]) => void\n  close: () => void\n}\n\nconst MenuWidth = 200;\n\n\nconst Menu = ({ toggled, picks, picksSet, close }: IMenu) => {\n\n  const [translateX] = useState(new Animated.Value(0))\n  const animateMenu = () => {\n    Animated.timing(translateX, {\n      toValue: !toggled ? -MenuWidth : 0,\n      useNativeDriver: true\n    }).start()\n  }\n\n  useEffect(() => {\n    animateMenu()\n  }, [toggled])\n\n  const handleTogglePick = (int: number) => {\n    let clonedPicks = [...picks]\n    if (picks.includes(int)) {\n      clonedPicks.splice(clonedPicks.indexOf(int), 1)\n    } else {\n      {\n        clonedPicks.push(int)\n        clonedPicks.sort((a: number, b: number) => a - b)\n      }\n    }\n    picksSet(clonedPicks)\n  }\n\n\n  return (\n    <Animated.View style={[styles.menu, [{ transform: [{ translateX }] }]]}>\n      <SafeAreaView style={{ flex: 1 }}>\n        <View style={{ flex: 1, padding: 16 }}>\n          {availablePicks.map((pick: number) => <MenuItem key={pick} {...{ pick, picks }} toggle={() => handleTogglePick(pick)} />)}\n        </View>\n        <View style={styles.close}>\n          <TouchableOpacity style={styles.btn} onPress={close}>\n            <MaterialCommunityIcons name=\"close\" size={40} />\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    </Animated.View>\n  )\n}\nconst { height } = Dimensions.get('window')\n\nexport default Menu\n\nconst styles = StyleSheet.create({\n  menu: { position: 'absolute', width: MenuWidth, height, top: 0, left: 0, borderRightWidth: 1, borderRightColor: \"#999\", backgroundColor: \"#dedede\" },\n  close: { marginTop: 'auto', alignItems: \"center\" },\n  btn: { height: 50, width: 50, alignItems: \"center\", justifyContent: \"center\" }\n})\n","import { StatusBar } from 'expo-status-bar';\nimport React, { useState, useEffect } from 'react';\nimport { ActivityIndicator, Button, Dimensions, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport ConfettiCannon from 'react-native-confetti-cannon';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport Menu from './components/Menu';\nimport { availablePicks } from './data';\nimport { SafeAreaProvider, SafeAreaView } from 'react-native-safe-area-context';\n\nexport default function App() {\n\n  const [toggled, toggledSet] = useState(true)\n  const [datetime, datetimeSet] = useState(new Date())\n  const [selecting, selectingSet] = useState(false)\n  const [selected, selectedSet] = useState(false)\n  const [result, resultSet] = useState(0)\n  const [picks, picksSet] = useState(availablePicks)\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      datetimeSet(new Date())\n    }, 1000)\n\n    return () => clearInterval(interval)\n  })\n\n  const handleSelection = () => {\n    selectingSet(true)\n    setTimeout(() => {\n      const selection = Math.floor(Math.random() * picks.length)\n      resultSet(picks[selection])\n      selectingSet(false)\n      selectedSet(true)\n    }, 1500)\n  }\n\n  const handleToggle = () => toggledSet((t: boolean) => !t)\n\n  return (\n    <SafeAreaProvider>\n      <SafeAreaView style={styles.container}>\n        <View style={{ position: 'absolute', top: 0, left: 16 }}>\n          <SafeAreaView>\n            <TouchableOpacity onPress={handleToggle}>\n              <MaterialCommunityIcons name=\"menu\" size={40} />\n            </TouchableOpacity>\n          </SafeAreaView>\n        </View>\n        <Text style={[styles.time, styles.text]}>{datetime.toLocaleTimeString()}</Text>\n        <View style={{ flex: 1 }}>\n\n          {!selected ? <>\n            <Text style={[styles.title, styles.text]}>Picks Available</Text>\n            <View style={styles.row}>\n              {picks.map((pick: number) => <DraftPick key={pick} {...{ pick }} />)}\n            </View>\n            <View style={{ marginTop: 100, }}>\n              {!selecting\n                ? <View style={{ alignSelf: 'center', width: 320 }}>\n                  <Button title=\"Randomly Select Pick\" onPress={handleSelection} /></View>\n                : <ActivityIndicator size={'large'} />}\n            </View>\n          </> : <View style={{ flex: 1 }}>\n            <Result {...{ result }} />\n            <ConfettiCannon count={200} origin={{ x: 0, y: 0 }} />\n          </View>}\n          <StatusBar style=\"auto\" />\n        </View>\n        <Menu close={() => toggledSet(false)} {...{ toggled, picks, picksSet }} />\n      </SafeAreaView>\n    </SafeAreaProvider>\n  );\n}\n\nconst Result = ({ result }: { result: null | number }) => {\n  if (!result) return null\n  return (\n    <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\n      <Text style={[styles.text, styles.title, styles.result]}>{result}</Text>\n      <Text style={[styles.text, styles.title, styles.suffix]}>{getSuffix(result)}</Text>\n    </View>\n  )\n}\n\nconst DraftPick = ({ pick }: { pick: number }) => {\n  let suffix = getSuffix(pick)\n  return <Text style={[styles.pick, styles.text]}>{pick}<Text style={styles.suffix}>{suffix}</Text></Text>\n}\n\nconst getSuffix = (int: number) => {\n  switch (int) {\n    case 1:\n      return \"st\"\n    case 2:\n      return \"nd\"\n    case 3:\n      return \"rd\"\n\n    default:\n      return \"th\"\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 60,\n    flex: 1,\n    backgroundColor: '#fff',\n    justifyContent: 'center',\n  },\n  text: { textAlign: \"center\" },\n  time: { fontFamily: 'Futura', fontWeight: 'bold', letterSpacing: 2, fontSize: 20 },\n  title: { textAlign: \"center\", fontFamily: 'Futura', fontWeight: 'normal', letterSpacing: 1, fontSize: 20, marginVertical: 20 },\n  row: { flexWrap: \"wrap\", flexDirection: 'row', alignItems: \"center\", justifyContent: \"center\" },\n  pick: { fontSize: 30, marginHorizontal: 10 },\n  suffix: { color: \"#777\" },\n  result: { fontSize: 150 }\n});\n"],"sourceRoot":""}